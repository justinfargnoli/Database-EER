-- MySQL Script generated by MySQL Workbench
-- Tue May 29 13:22:51 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `mydb` ;

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`Student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Student` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Student` (
  `idStudent` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NULL,
  PRIMARY KEY (`idStudent`),
  UNIQUE INDEX `idStudent_UNIQUE` (`idStudent` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Order` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Order` (
  `idOrder` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `paymentMethod` VARCHAR(45) NOT NULL,
  `price` DECIMAL(10, 2) NOT NULL,
  `Student_idStudent` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idOrder`, `Student_idStudent`),
  INDEX `fk_Order_Student1_idx` (`Student_idStudent` ASC),
  UNIQUE INDEX `idOrder_UNIQUE` (`idOrder` ASC),
  CONSTRAINT `fk_Order_Student1`
    FOREIGN KEY (`Student_idStudent`)
    REFERENCES `mydb`.`Student` (`idStudent`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Teacher`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Teacher` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Teacher` (
  `idTeacher` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `firstName` VARCHAR(45) NULL,
  `lastName` VARCHAR(45) NOT NULL,
  `roomNumber` VARCHAR(45) NULL,
  PRIMARY KEY (`idTeacher`),
  UNIQUE INDEX `idTeacher_UNIQUE` (`idTeacher` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Book`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Book` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Book` (
  `idBook` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `price` DECIMAL(10, 2) NOT NULL,
  PRIMARY KEY (`idBook`),
  UNIQUE INDEX `idBook_UNIQUE` (`idBook` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Course`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Course` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Course` (
  `idCourse` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Book_idBook` INT UNSIGNED NOT NULL,
  `courseName` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idCourse`),
  UNIQUE INDEX `idCourse_UNIQUE` (`idCourse` ASC),
  INDEX `fk_Course_Book1_idx` (`Book_idBook` ASC),
  CONSTRAINT `fk_Course_Book1`
    FOREIGN KEY (`Book_idBook`)
    REFERENCES `mydb`.`Book` (`idBook`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Teacher_has_Course`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Teacher_has_Course` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Teacher_has_Course` (
  `Teacher_idTeacher` INT UNSIGNED NOT NULL,
  `Course_idCourse` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Teacher_idTeacher`, `Course_idCourse`),
  INDEX `fk_Teacher_has_Course_Course1_idx` (`Course_idCourse` ASC),
  INDEX `fk_Teacher_has_Course_Teacher1_idx` (`Teacher_idTeacher` ASC),
  CONSTRAINT `fk_Teacher_has_Course_Teacher1`
    FOREIGN KEY (`Teacher_idTeacher`)
    REFERENCES `mydb`.`Teacher` (`idTeacher`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Teacher_has_Course_Course1`
    FOREIGN KEY (`Course_idCourse`)
    REFERENCES `mydb`.`Course` (`idCourse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Class`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Class` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Class` (
  `idClass` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Teacher_idTeacher` INT UNSIGNED NOT NULL,
  `blockTime` VARCHAR(10) NOT NULL,
  `Course_idCourse` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`idClass`, `Teacher_idTeacher`, `Course_idCourse`),
  UNIQUE INDEX `idClass_UNIQUE` (`idClass` ASC),
  INDEX `fk_Class_Teacher1_idx` (`Teacher_idTeacher` ASC),
  INDEX `fk_Class_Course1_idx` (`Course_idCourse` ASC),
  CONSTRAINT `fk_Class_Teacher1`
    FOREIGN KEY (`Teacher_idTeacher`)
    REFERENCES `mydb`.`Teacher` (`idTeacher`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Class_Course1`
    FOREIGN KEY (`Course_idCourse`)
    REFERENCES `mydb`.`Course` (`idCourse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Class_has_Student`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Class_has_Student` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Class_has_Student` (
  `Class_idClass` INT UNSIGNED NOT NULL,
  `Student_idStudent` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Class_idClass`, `Student_idStudent`),
  INDEX `fk_Class_has_Student_Student1_idx` (`Student_idStudent` ASC),
  INDEX `fk_Class_has_Student_Class1_idx` (`Class_idClass` ASC),
  CONSTRAINT `fk_Class_has_Student_Class1`
    FOREIGN KEY (`Class_idClass`)
    REFERENCES `mydb`.`Class` (`idClass`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Class_has_Student_Student1`
    FOREIGN KEY (`Student_idStudent`)
    REFERENCES `mydb`.`Student` (`idStudent`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Order_has_Book`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Order_has_Book` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Order_has_Book` (
  `Order_idOrder` INT UNSIGNED NOT NULL,
  `Book_idBook` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Order_idOrder`, `Book_idBook`),
  INDEX `fk_Order_has_Book_Book1_idx` (`Book_idBook` ASC),
  INDEX `fk_Order_has_Book_Order1_idx` (`Order_idOrder` ASC),
  CONSTRAINT `fk_Order_has_Book_Order1`
    FOREIGN KEY (`Order_idOrder`)
    REFERENCES `mydb`.`Order` (`idOrder`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_has_Book_Book1`
    FOREIGN KEY (`Book_idBook`)
    REFERENCES `mydb`.`Book` (`idBook`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Order_has_Course`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Order_has_Course` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Order_has_Course` (
  `Order_idOrder` INT UNSIGNED NOT NULL,
  `Course_idCourse` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Order_idOrder`, `Course_idCourse`),
  INDEX `fk_Order_has_Course_Course1_idx` (`Course_idCourse` ASC),
  INDEX `fk_Order_has_Course_Order1_idx` (`Order_idOrder` ASC),
  CONSTRAINT `fk_Order_has_Course_Order1`
    FOREIGN KEY (`Order_idOrder`)
    REFERENCES `mydb`.`Order` (`idOrder`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_has_Course_Course1`
    FOREIGN KEY (`Course_idCourse`)
    REFERENCES `mydb`.`Course` (`idCourse`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Order_has_Teacher`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Order_has_Teacher` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Order_has_Teacher` (
  `Order_idOrder` INT UNSIGNED NOT NULL,
  `Teacher_idTeacher` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Order_idOrder`, `Teacher_idTeacher`),
  INDEX `fk_Order_has_Teacher_Teacher1_idx` (`Teacher_idTeacher` ASC),
  INDEX `fk_Order_has_Teacher_Order1_idx` (`Order_idOrder` ASC),
  CONSTRAINT `fk_Order_has_Teacher_Order1`
    FOREIGN KEY (`Order_idOrder`)
    REFERENCES `mydb`.`Order` (`idOrder`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_has_Teacher_Teacher1`
    FOREIGN KEY (`Teacher_idTeacher`)
    REFERENCES `mydb`.`Teacher` (`idTeacher`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`Order_has_Class`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `mydb`.`Order_has_Class` ;

CREATE TABLE IF NOT EXISTS `mydb`.`Order_has_Class` (
  `Order_idOrder` INT UNSIGNED NOT NULL,
  `Class_idClass` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`Order_idOrder`, `Class_idClass`),
  INDEX `fk_Order_has_Class_Class1_idx` (`Class_idClass` ASC),
  INDEX `fk_Order_has_Class_Order1_idx` (`Order_idOrder` ASC),
  CONSTRAINT `fk_Order_has_Class_Order1`
    FOREIGN KEY (`Order_idOrder`)
    REFERENCES `mydb`.`Order` (`idOrder`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Order_has_Class_Class1`
    FOREIGN KEY (`Class_idClass`)
    REFERENCES `mydb`.`Class` (`idClass`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;





# The following SQL codes' purpose is to fill mydb

USE mydb;

INSERT INTO Book (title, price)
VALUES ("Global Studies 2", 14.00), 
	("US History", 14.00), 
	("Algebra 1", 3.50), 
	("Geometry", 3.50), 
	("Algebra 2", 3.50);

INSERT INTO Teacher (firstName, lastName, roomNumber) 
VALUES ("Christina","Falbo", 133),
	("Katherine", "Resch", 123),
	("John", "Gentile", 1234),
	("Mike", "Marra", 765),
	("Daniel", "Glover", 09),
	("Katie", "Mason", 798),
	("Jody", "Wyant", 1000),
	("David", "Guzzetta", 8765),
	("Kristin", "Cocchiara", 0987),
	("Linda","Critelli", 1243),
	("Jacquelyn", "Lanpher", 0685),
	("Melissa", "Placito", 0987),
	("Chelsea", "Antosh", 8173),
	("Marc", "Coffie", 7283),
	("Sarah","Colasanto", 0987),
	("Jake","Lenhard", 4353),
	("Julie", "Bishop", 0109),
	("Kimberly", "McLean", 9876),
	("Sandra", "McGreevy", 410);
    
INSERT INTO Student (firstName, lastName)
VALUES( "Ryan", "Birkbeck"),
	( "Justin", "Fargnoli"),
	("James", "Dunn"),
	("Cody", "Toland"),
	("Jaden", "gillete"),
	("Elliot", "Chung"),
	("Jake", "Barklund"),
	("Mike", "Jansen"),
	("Amy", "Schumer"),
	("Jack", "Lehtonen"),
	("Josh", "Falbo"),
	("Jackson", "Akers"),
	("Kylie", "Tozer"),
	("Alyssa", "Falbo"),
	("Kylie", "Antonio"),
	("Jimmy","Neutron"),
	("Kevin", "James"),
	("Hugh", "Mongis"),
	("Bob", "Saget"),
	("Kevin", "Heart"),
	("Bailey", "Evans"),
	("Cam", "Nitti");

INSERT INTO Course (Book_idBook, courseName)
VALUES (1, "Global Studies 2"), 
	(2, "US History"),
    (3, "Algebra 1"), 
    (4, "Geometry"), 
    (5, "Algebra 2");
      
INSERT INTO mydb.Order (paymentMethod, price, Student_idStudent)
VALUES ("Check", 17.50, 1),
    ("Cash", 17.50, 2),
    ("Exempt", 17.50, 3),
    ("Exempt", 14.00, 4),
    ("Cash", 24.50, 5),
    ("Check", 17.50, 6),
    ("Check", 14.00, 7),
    ("Check", 3.50, 8),
    ("Cash", 27.50, 9),
    ("Exempt", 24.00, 11),
    ("Cash", 21.00, 12),
    ("Check", 17.50, 13),
    ("Exempt", 17.50, 14),
    ("Cash", 21.00, 15),
    ("Check", 17.50, 16),
    ("Exempt", 17.50, 17),
    ("Check", 17.50, 18),
    ("Cash", 14.00, 19),
    ("Check", 17.50, 20),
    ("Exempt", 3.50, 21);
 
INSERT INTO Class (Teacher_idTeacher, Course_idCourse, blockTime)
VALUES (1, 1, "1AC"),
    (2, 1, "2AC"),
    (3, 1, "3AC"),
    (4, 1, "4AC"),
    (5, 2, "1BD"),
    (6, 2, "2BD"),
    (7, 2, "3BD"),
    (8, 2, "4BD"),
    (9, 3, "1AC"),
    (10, 3, "2AC"),
    (11, 3, "3AC"),
    (12, 3, "4AC"),
    (13, 4, "1BD"),
    (14, 4, "2BD"),
    (15, 4, "3BD"),
    (16, 4, "4BD"),
    (17, 5, "1AC"),
    (18, 5, "2AC"),
    (19, 5, "3AC"),
    (12, 5, "4AC");
    
# The following insert statments will be for the resolution tables

INSERT INTO Teacher_has_Course(Teacher_idTeacher, Course_idCourse)
VALUES (1, 1),
	(2, 1),
	(3, 1),
	(4, 1),
	(5, 2),
    (6, 2),
    (7, 2),
    (8, 2),
    (9, 3),
    (10, 3),
    (11, 3),
    (12, 3),
    (13, 4),
    (14, 4),
    (15, 4),
    (16, 4),
    (17, 5),
    (18, 5),
    (19, 5),
    (12, 5);

INSERT INTO Class_has_Student(Class_idClass, Student_idStudent)
VALUES (1,1),
    (1, 3),
    (1, 5),
    (2, 7), 
	(2, 9),
    (3,  11), 
    (3, 13),  
    (3, 15), 
    (4, 17), 
    (4, 19), 
    (5, 2),
    (5, 4),
    (6, 6),
    (6, 9),
    (6, 11),
    (7, 12),
    (7, 14),
    (7, 16),
    (8, 18),
    (8, 20),
    (9, 1),
    (9, 3),
    (9, 5),
    (9, 6),
    (11, 12),
    (11, 14),
    (12, 17),
    (12, 18),
    (12, 20),
    (13, 5),
    (15, 12),
    (15, 13),
    (15, 15),
    (15, 16),
    (17, 2),
    (17, 5),
    (18, 8),
    (18, 9),
    (19, 15),
    (20, 21);
    
INSERT INTO Order_has_Book(Order_idOrder, Book_idBook)
VALUES (1, 1),
    (1, 3),
    (2, 2),
    (2, 5),
    (3, 1),
    (3, 3),
    (4, 2),
    (5, 1),
    (5, 3),
    (5, 4),
    (5, 5),
    (6, 2),
    (6, 3),
    (7, 1),
    (8, 5),
    (9, 1),
    (9, 2),
    (9, 5),
    (10, 1),
    (10, 2),
    (11, 2),
    (11, 3),
    (11, 4),
    (12, 1),
    (12, 4),
    (13, 2),
    (13, 3),
    (14, 1),
    (14, 4),
    (14, 5),
    (15, 2),
    (15, 4),
    (16, 1),
    (16, 3),
    (17, 2),
    (17, 3),
    (18, 1),
    (19, 2),
    (19, 3),
    (20, 5);
    
INSERT INTO Order_Has_Course(Order_idOrder, Course_idCourse)
VALUES (1, 1),
    (1, 3),
    (2, 2),
    (2, 5),
    (3, 1),
    (3, 3),
    (4, 3),
    (5, 1),
    (5, 3),
    (5, 4),
    (5, 5),
    (6, 2),
    (6, 3),
    (7, 1),
    (8, 5),
    (9, 1),
    (9, 2),
    (9, 5),
    (10, 1),
    (10, 2),
    (11, 2),
    (11, 3),
    (11, 4),
    (12, 1),
    (12, 4),
    (13, 2),
    (13, 3),
    (14, 1),
    (14, 4),
    (14, 5),
    (15, 2),
    (15, 4),
    (16, 1),
    (16, 3),
    (17, 2),
    (17, 3),
    (18, 1),
    (19, 2),
    (19, 3),
    (20, 5);
    
INSERT INTO Order_has_Class(Class_idClass, Order_idOrder)
VALUES (1,1),
    (1, 3),
    (1, 5),
    (2, 7), 
	(2, 9),
    (3,  10), 
    (3, 12),  
    (3, 14), 
    (4, 16), 
    (4, 18), 
    (5, 2),
    (5, 4),
    (6, 6),
    (6, 9),
    (6, 10),
    (7, 11),
    (7, 13),
    (7, 15),
    (8, 17),
    (8, 19),
    (9, 1),
    (9, 3),
    (9, 5),
    (9, 6),
    (11, 11),
    (11, 13),
    (12, 16),
    (12, 17),
    (12, 19),
    (13, 5),
    (15, 11),
    (15, 12),
    (15, 14),
    (15, 15),
    (17, 2),
    (17, 5),
    (18, 8),
    (18, 9),
    (19, 14),
    (20, 20);
    
INSERT INTO Order_has_Teacher(Order_idOrder, Teacher_idTeacher)
VALUES (1,1),
    (1, 3),
    (1, 5),
    (2, 7), 
	(2, 9),
    (3,  10), 
    (3, 12),  
    (3, 14), 
    (4, 16), 
    (4, 18), 
    (5, 2),
    (5, 4),
    (6, 6),
    (6, 9),
    (6, 10),
    (7, 11),
    (7, 13),
    (7, 15),
    (8, 17),
    (8, 19),
    (9, 1),
    (9, 3),
    (9, 5),
    (9, 6),
    (11, 11),
    (11, 13),
    (12, 16),
    (12, 17),
    (12, 19),
    (13, 5),
    (15, 11),
    (15, 12),
    (15, 14),
    (15, 15),
    (17, 2),
    (17, 5),
    (18, 8),
    (18, 9),
    (19, 14),
    (20, 12);